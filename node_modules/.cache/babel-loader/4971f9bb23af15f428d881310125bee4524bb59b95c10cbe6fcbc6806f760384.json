{"ast":null,"code":"'use strict';\n\nvar _require = require('../utils/razorpay-utils'),\n  normalizeDate = _require.normalizeDate,\n  normalizeNotes = _require.normalizeNotes;\nmodule.exports = function (api) {\n  return {\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      var from = params.from,\n        to = params.to,\n        count = params.count,\n        skip = params.skip,\n        payment_id = params.payment_id;\n      var url = '/refunds';\n      if (payment_id) {\n        url = '/payments/' + payment_id + '/refunds';\n      }\n      if (from) {\n        from = normalizeDate(from);\n      }\n      if (to) {\n        to = normalizeDate(to);\n      }\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n      return api.get({\n        url: url,\n        data: {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        }\n      }, callback);\n    },\n    edit: function edit(refundId, params, callback) {\n      var notes = params.notes;\n      if (!refundId) {\n        throw new Error('refund Id is mandatory');\n      }\n      var data = Object.assign(normalizeNotes(notes));\n      return api.patch({\n        url: '/refunds/' + refundId,\n        data: data\n      }, callback);\n    },\n    fetch: function fetch(refundId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n      var payment_id = params.payment_id;\n      if (!refundId) {\n        throw new Error('`refund_id` is mandatory');\n      }\n      var url = '/refunds/' + refundId;\n      if (payment_id) {\n        url = '/payments/' + payment_id + url;\n      }\n      return api.get({\n        url: url\n      }, callback);\n    }\n  };\n};","map":{"version":3,"names":["_require","require","normalizeDate","normalizeNotes","module","exports","api","all","params","arguments","length","undefined","callback","from","to","count","skip","payment_id","url","Number","get","data","edit","refundId","notes","Error","Object","assign","patch","fetch"],"sources":["/Users/rajnish/Desktop/INTERN/Homeoz HealthCare/Task 3 FrontEnd Development/client/node_modules/razorpay/dist/resources/refunds.js"],"sourcesContent":["'use strict';\n\nvar _require = require('../utils/razorpay-utils'),\n    normalizeDate = _require.normalizeDate,\n    normalizeNotes = _require.normalizeNotes;\n\nmodule.exports = function (api) {\n  return {\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip,\n          payment_id = params.payment_id;\n\n      var url = '/refunds';\n\n      if (payment_id) {\n        url = '/payments/' + payment_id + '/refunds';\n      }\n\n      if (from) {\n        from = normalizeDate(from);\n      }\n\n      if (to) {\n        to = normalizeDate(to);\n      }\n\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n\n      return api.get({\n        url: url,\n        data: {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        }\n      }, callback);\n    },\n    edit: function edit(refundId, params, callback) {\n      var notes = params.notes;\n\n\n      if (!refundId) {\n        throw new Error('refund Id is mandatory');\n      }\n\n      var data = Object.assign(normalizeNotes(notes));\n\n      return api.patch({\n        url: '/refunds/' + refundId,\n        data: data\n      }, callback);\n    },\n    fetch: function fetch(refundId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n      var payment_id = params.payment_id;\n\n      if (!refundId) {\n        throw new Error('`refund_id` is mandatory');\n      }\n\n      var url = '/refunds/' + refundId;\n\n      if (payment_id) {\n        url = '/payments/' + payment_id + url;\n      }\n\n      return api.get({\n        url: url\n      }, callback);\n    }\n  };\n};"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,yBAAyB,CAAC;EAC7CC,aAAa,GAAGF,QAAQ,CAACE,aAAa;EACtCC,cAAc,GAAGH,QAAQ,CAACG,cAAc;AAE5CC,MAAM,CAACC,OAAO,GAAG,UAAUC,GAAG,EAAE;EAC9B,OAAO;IACLC,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;MAClB,IAAIC,MAAM,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACnF,IAAIG,QAAQ,GAAGH,SAAS,CAAC,CAAC,CAAC;MAC3B,IAAII,IAAI,GAAGL,MAAM,CAACK,IAAI;QAClBC,EAAE,GAAGN,MAAM,CAACM,EAAE;QACdC,KAAK,GAAGP,MAAM,CAACO,KAAK;QACpBC,IAAI,GAAGR,MAAM,CAACQ,IAAI;QAClBC,UAAU,GAAGT,MAAM,CAACS,UAAU;MAElC,IAAIC,GAAG,GAAG,UAAU;MAEpB,IAAID,UAAU,EAAE;QACdC,GAAG,GAAG,YAAY,GAAGD,UAAU,GAAG,UAAU;MAC9C;MAEA,IAAIJ,IAAI,EAAE;QACRA,IAAI,GAAGX,aAAa,CAACW,IAAI,CAAC;MAC5B;MAEA,IAAIC,EAAE,EAAE;QACNA,EAAE,GAAGZ,aAAa,CAACY,EAAE,CAAC;MACxB;MAEAC,KAAK,GAAGI,MAAM,CAACJ,KAAK,CAAC,IAAI,EAAE;MAC3BC,IAAI,GAAGG,MAAM,CAACH,IAAI,CAAC,IAAI,CAAC;MAExB,OAAOV,GAAG,CAACc,GAAG,CAAC;QACbF,GAAG,EAAEA,GAAG;QACRG,IAAI,EAAE;UACJR,IAAI,EAAEA,IAAI;UACVC,EAAE,EAAEA,EAAE;UACNC,KAAK,EAAEA,KAAK;UACZC,IAAI,EAAEA;QACR;MACF,CAAC,EAAEJ,QAAQ,CAAC;IACd,CAAC;IACDU,IAAI,EAAE,SAASA,IAAIA,CAACC,QAAQ,EAAEf,MAAM,EAAEI,QAAQ,EAAE;MAC9C,IAAIY,KAAK,GAAGhB,MAAM,CAACgB,KAAK;MAGxB,IAAI,CAACD,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEA,IAAIJ,IAAI,GAAGK,MAAM,CAACC,MAAM,CAACxB,cAAc,CAACqB,KAAK,CAAC,CAAC;MAE/C,OAAOlB,GAAG,CAACsB,KAAK,CAAC;QACfV,GAAG,EAAE,WAAW,GAAGK,QAAQ;QAC3BF,IAAI,EAAEA;MACR,CAAC,EAAET,QAAQ,CAAC;IACd,CAAC;IACDiB,KAAK,EAAE,SAASA,KAAKA,CAACN,QAAQ,EAAE;MAC9B,IAAIf,MAAM,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACnF,IAAIG,QAAQ,GAAGH,SAAS,CAAC,CAAC,CAAC;MAC3B,IAAIQ,UAAU,GAAGT,MAAM,CAACS,UAAU;MAElC,IAAI,CAACM,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,IAAIP,GAAG,GAAG,WAAW,GAAGK,QAAQ;MAEhC,IAAIN,UAAU,EAAE;QACdC,GAAG,GAAG,YAAY,GAAGD,UAAU,GAAGC,GAAG;MACvC;MAEA,OAAOZ,GAAG,CAACc,GAAG,CAAC;QACbF,GAAG,EAAEA;MACP,CAAC,EAAEN,QAAQ,CAAC;IACd;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}